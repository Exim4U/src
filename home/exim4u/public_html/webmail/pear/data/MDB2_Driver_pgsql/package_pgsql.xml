<?xml version="1.0" encoding="UTF-8"?>
<package packagerversion="1.5.3" version="2.0" xmlns="http://pear.php.net/dtd/package-2.0" xmlns:tasks="http://pear.php.net/dtd/tasks-1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://pear.php.net/dtd/tasks-1.0 http://pear.php.net/dtd/tasks-1.0.xsd http://pear.php.net/dtd/package-2.0 http://pear.php.net/dtd/package-2.0.xsd">
 <name>MDB2_Driver_pgsql</name>
 <channel>pear.php.net</channel>
 <summary>pgsql MDB2 driver</summary>
 <description>This is the PostgreSQL MDB2 driver.</description>
 <lead>
  <name>Lukas Kahwe Smith</name>
  <user>lsmith</user>
  <email>smith@pooteeweet.org</email>
  <active>no</active>
 </lead>
 <lead>
  <name>Lorenzo Alberton</name>
  <user>quipo</user>
  <email>l.alberton@quipo.it</email>
  <active>yes</active>
 </lead>
 <developer>
  <name>Nathan Fredrickson</name>
  <user>nrf</user>
  <email>nathan@silverorange.com</email>
  <active>yes</active>
 </developer>
 <date>2007-05-03</date>
 <time>20:56:24</time>
 <version>
  <release>1.4.1</release>
  <api>1.4.1</api>
 </version>
 <stability>
  <release>stable</release>
  <api>stable</api>
 </stability>
 <license>BSD License</license>
 <notes>- return length as &quot;precision,scale&quot; for NUMERIC and DECIMAL fields in mapNativeDatatype()
- more accurate field size information in getTableFieldDefinition() in the
  Reverse module
- in getTableIndexDefinition() and getTableConstraintDefinition() in the Reverse
  module, also return the field position in the index/constraint
- Request #9106: more accurate sequence name retrieval routine in getSequenceName()
- fixed bug #10895: setLimit() does not work properly when a subquery uses LIMIT

open todo items:
- enable pg_execute() once issues with bytea column are resolved
- use pg_result_error_field() to handle localized error messages (Request #7059)
- add option to use unnamed prepared statements
  (see http://www.postgresql.org/docs/current/static/protocol-flow.html &quot;Extended Query&quot;)</notes>
 <contents>
  <dir baseinstalldir="/" name="/">
   <dir name="MDB2">
    <dir name="Driver">
     <dir name="Datatype">
      <file name="pgsql.php" role="php">
       <tasks:replace from="@package_version@" to="version" type="package-info" />
      </file>
     </dir> <!-- /MDB2/Driver/Datatype -->
     <dir name="Function">
      <file name="pgsql.php" role="php">
       <tasks:replace from="@package_version@" to="version" type="package-info" />
      </file>
     </dir> <!-- /MDB2/Driver/Function -->
     <dir name="Manager">
      <file name="pgsql.php" role="php">
       <tasks:replace from="@package_version@" to="version" type="package-info" />
      </file>
     </dir> <!-- /MDB2/Driver/Manager -->
     <dir name="Native">
      <file name="pgsql.php" role="php">
       <tasks:replace from="@package_version@" to="version" type="package-info" />
      </file>
     </dir> <!-- /MDB2/Driver/Native -->
     <dir name="Reverse">
      <file name="pgsql.php" role="php">
       <tasks:replace from="@package_version@" to="version" type="package-info" />
      </file>
     </dir> <!-- /MDB2/Driver/Reverse -->
     <file name="pgsql.php" role="php">
      <tasks:replace from="@package_version@" to="version" type="package-info" />
     </file>
    </dir> <!-- /MDB2/Driver -->
   </dir> <!-- /MDB2 -->
   <dir name="tests">
    <file name="MDB2_nonstandard_pgsql.php" role="test" />
   </dir> <!-- /tests -->
   <file name="package_pgsql.xml" role="data" />
  </dir> <!-- / -->
 </contents>
 <dependencies>
  <required>
   <php>
    <min>4.3.0</min>
   </php>
   <pearinstaller>
    <min>1.4.0b1</min>
   </pearinstaller>
   <package>
    <name>MDB2</name>
    <channel>pear.php.net</channel>
    <min>2.4.1</min>
   </package>
   <extension>
    <name>pgsql</name>
   </extension>
  </required>
 </dependencies>
 <phprelease />
 <changelog>
  <release>
   <version>
    <release>1.4.1</release>
    <api>1.4.1</api>
   </version>
   <stability>
    <release>stable</release>
    <api>stable</api>
   </stability>
   <date>2007-05-03</date>
   <license>BSD License</license>
   <notes>- return length as &quot;precision,scale&quot; for NUMERIC and DECIMAL fields in mapNativeDatatype()
- more accurate field size information in getTableFieldDefinition() in the
  Reverse module
- in getTableIndexDefinition() and getTableConstraintDefinition() in the Reverse
  module, also return the field position in the index/constraint
- Request #9106: more accurate sequence name retrieval routine in getSequenceName()
- fixed bug #10895: setLimit() does not work properly when a subquery uses LIMIT

open todo items:
- enable pg_execute() once issues with bytea column are resolved
- use pg_result_error_field() to handle localized error messages (Request #7059)
- add option to use unnamed prepared statements
  (see http://www.postgresql.org/docs/current/static/protocol-flow.html &quot;Extended Query&quot;)</notes>
  </release>
  <release>
   <version>
    <release>1.4.0</release>
    <api>1.4.0</api>
   </version>
   <stability>
    <release>stable</release>
    <api>stable</api>
   </stability>
   <date>2007-03-13</date>
   <license>BSD License</license>
   <notes>- propagate errors in getTableFieldDefinition() in the Reverse module
- implemented getTriggerDefinition() in the Reverse module [experimental]
- implemented listTableTriggers() in the Manager module
- don&apos;t show catalog views in listViews() in the Manager module
- implemented a fallback mechanism within getTableIndexDefinition() and
  getTableConstraintDefinition() in the Reverse module to ignore the &apos;idxname_format&apos;
  option and use the index name as provided in case of failure before returning
  an error
- added a &apos;nativetype_map_callback&apos; option to map native data declarations back to
  custom data types (thanks to Andrew Hill).
- lastInsertID() without parameters now returns the last used ID (request #9989)
- phpdoc fixes

open todo items:
- enable pg_execute() once issues with bytea column are resolved
- use pg_result_error_field() to handle localized error messages (Request #7059)
- add option to use unnamed prepared statements
  (see http://www.postgresql.org/docs/current/static/protocol-flow.html &quot;Extended Query&quot;)</notes>
  </release>
  <release>
   <version>
    <release>1.3.0</release>
    <api>2.3.0</api>
   </version>
   <stability>
    <release>stable</release>
    <api>stable</api>
   </stability>
   <date>2006-11-03</date>
   <license>BSD License</license>
   <notes>- fixed _modifyQuery() for manipulation queries
- fixed inheritance structure of convertResult()
- added support for new &apos;disable_iso_date&apos; date DSN option (Request #8739)
- added support for getting the table name in tableInfo()
- added connection to pg_escape_*() calls
- fixed _modifyQuery() for manipulation queries
- enable detection of proper size of integers in mapNativeDatatype
- migrated to package.xml version 2

open todo items:
- enable pg_execute() once issues with bytea column are resolved
- use pg_result_error_field() to handle localized error messages (Request #7059)
- add option to use unnamed prepared statements
  (see http://www.postgresql.org/docs/current/static/protocol-flow.html &quot;Extended Query&quot;)</notes>
  </release>
  <release>
   <version>
    <release>1.2.2</release>
    <api>1.2.2</api>
   </version>
   <stability>
    <release>stable</release>
    <api>stable</api>
   </stability>
   <date>2006-09-03</date>
   <license uri="http://www.example.com">BSD License</license>
   <notes>- flip positions property array in prepared statement objects to make it
  possible to optionally use the same named placeholder in multiple places
  inside a single prepared statement

open todo items:
- enable pg_execute() once issues with bytea column are resolved
- use pg_result_error_field() to handle localized error messages (Request #7059)</notes>
  </release>
  <release>
   <version>
    <release>1.2.1</release>
    <api>1.2.1</api>
   </version>
   <stability>
    <release>stable</release>
    <api>stable</api>
   </stability>
   <date>2006-08-21</date>
   <license uri="http://www.example.com">BSD License</license>
   <notes>- return an error if a named placeholder name is used twice inside a single statement
- do not list empty contraints and indexes
- do not set a default if type is a LOB (Request #8074)
- fixed handling return values when disable_query is set in _doQuery() and _execute()
- increased MDB2 dependency too 2.2.1

open todo items:
- enable pg_execute() once issues with bytea column are resolved
- use pg_result_error_field() to handle localized error messages (Request #7059)</notes>
  </release>
  <release>
   <version>
    <release>1.2.0</release>
    <api>1.2.0</api>
   </version>
   <stability>
    <release>stable</release>
    <api>stable</api>
   </stability>
   <date>2006-07-23</date>
   <license uri="http://www.example.com">BSD License</license>
   <notes>- performance tweaks for pg_prepare() enabled installations
- MDB2_PORTABILITY_RTRIM ignored by driver (Bug #8239)
- added ability to escape wildcard characters in escape() and quote()
- added setTransactionIsolation()
- added savepoint support to beginTransaction(), commit() and rollback()
- added debug() call at the end of a query/prepare/execute calling (Request #7933)
- added context array parameter to debug() and make use of it whereever sensible
- added optional method name parameter to raiseError() and use whereever possible
- added ability to escape wildcard characters in escape() and quote()
- added debug() call at the end of a query/prepare/execute calling (Request #7933)
- added &apos;nativetype&apos; output to tableInfo() and getTableFieldDefinition()
- added &apos;mdb2type&apos; output to getTableFieldDefinition()
- reworked tableInfo() to use a common implementation based on getTableFieldDefinition()
  when a table name is passed (Bug #8124)
- fixed incorrect regex in mapNativeDatatype() (Bug #8256) (thx ioz at ionosfera dot com)
- disconnect after changing database/DSN (otherwise transactions may be left open)
- use old dsn when rolling back open transactions in disconnect()

open todo items:
- enable pg_execute() once issues with bytea column are resolved
- use pg_result_error_field() to handle localized error messages (Request #7059)</notes>
  </release>
  <release>
   <version>
    <release>1.1.0</release>
    <api>1.1.0</api>
   </version>
   <stability>
    <release>stable</release>
    <api>stable</api>
   </stability>
   <date>2006-06-15</date>
   <license uri="http://www.example.com">BSD License</license>
   <notes>- added setCharset()
- use setCharset() in connect()/_doConnect()
- generalized quoteIdentifier() with a property
- switched most array_key_exists() calls to !empty() to improve readability and performance
- fixed a few edge cases and potential warnings
- return error when changing datatypes in alterTable() on pgsql version lower than 8.x (Bug #7731)
- added ability to rewrite queries for query(), exec() and prepare() using a debug handler callback
- fixed missing error handling in getTableFieldDefinition() (Bug #7791)
- pass limit and offset to the result object constructor in _execute() for read statements
- use pg_prepare() if available so that we do not need to define the types anymore (Request #7797)
- added code to use pg_execute() but disabled due to issues with bytea fields
- check if result/connection has not yet been freed/dicsonnected before
  attempting to free a result set(Bug #7790)
- revert change that would prefer &apos;clob&apos; over &apos;text&apos; for TEXT fields
  (this was breaking runtime instrospection)

open todo items:
- enable pg_execute() once issues with bytea column are resolved</notes>
  </release>
  <release>
   <version>
    <release>1.0.3</release>
    <api>1.0.3</api>
   </version>
   <stability>
    <release>stable</release>
    <api>stable</api>
   </stability>
   <date>2006-05-24</date>
   <license uri="http://www.example.com">BSD License</license>
   <notes>SECURITY FIX (http://www.postgresql.org/docs/techdocs.50)
- use pg_escape_string()
- use &quot;&apos;&quot; as the escape character
- limit fetch to 1 row in listTableFields()</notes>
  </release>
  <release>
   <version>
    <release>1.0.2</release>
    <api>1.0.2</api>
   </version>
   <stability>
    <release>stable</release>
    <api>stable</api>
   </stability>
   <date>2006-05-23</date>
   <license uri="http://www.example.com">BSD License</license>
   <notes>- added &quot;emulate_prepared&quot; option to force prepared statement emulation
- tweaked handling of free() for prepared statements
- return error if a prepared statement is attempted to be freed twice
- fixed notice when using prepare() without placeholders</notes>
  </release>
  <release>
   <version>
    <release>1.0.1</release>
    <api>1.0.1</api>
   </version>
   <stability>
    <release>stable</release>
    <api>stable</api>
   </stability>
   <date>2006-05-14</date>
   <license uri="http://www.example.com">BSD License</license>
   <notes>- added listTableViews() (request #6773)
- explicitly set is_manip parameter to false for transaction debug calls
- pass parameter array as debug() all with scope &quot;parameters&quot; in every execute()
  call (bug #4119)
- typo fixes in phpdoc (thx Stoyan)
- added support for fixed and variable types for &apos;text&apos; in declarations,
  as well as in reverse engineering (Request #1523)
- made _doQuery() return a reference
- added userinfo&apos;s to all raiseError calls that previously had none
- calling PREPARE is always a manip query
- added &apos;prepared_statements&apos; supported meta data setting
- strip of file:// prefix in writeLOBToFile()
- typo fix ressource/resource in LOB array
- added missing supported parameter to prepare() signature
- properly handle explicit error codes in errorInfo()
- moved from OID to TEXT and BYTEA (OID handling was broken, its also deprecated)</notes>
  </release>
  <release>
   <version>
    <release>1.0.0</release>
    <api>1.0.0</api>
   </version>
   <stability>
    <release>stable</release>
    <api>stable</api>
   </stability>
   <date>2006-02-09</date>
   <license uri="http://www.example.com">BSD License</license>
   <notes>- handle null as resource when disable_query option is enabled in result object

open todo items:
- considering migrating away from OID&apos;s to bytea, since this is encourage
  since version 8 and is also what PDO expects, however there is no streaming
  API for bytea columns .. this needs to be done using manually chunked reads/writes</notes>
  </release>
  <release>
   <version>
    <release>0.2.4</release>
    <api>0.2.4</api>
   </version>
   <stability>
    <release>beta</release>
    <api>beta</api>
   </stability>
   <date>2006-02-05</date>
   <license uri="http://www.example.com">BSD License</license>
   <notes>- added support for length in integer and decimal columns
- removed ugly hack for quote parameter in quote() since it was insufficient
  (escaping also needs to be prevented)
- added support for out of order parameter binding in prepared queries
- reset row_limit and row_offset after calling prepare() just like we do for query() and exec()
- cosmetic fix (removed &quot;row_&quot; prefix from &quot;row_limit&quot; and &quot;row_offset&quot;)
- improved parsing in getServerInfo() (bug #6550)

open todo items:
- considering migrating away from OID&apos;s to bytea, since this is encourage
  since version 8 and is also what PDO expects, however there is no streaming
  API for bytea columns .. this needs to be done using manually chunked reads/writes</notes>
  </release>
  <release>
   <version>
    <release>0.2.3</release>
    <api>0.2.3</api>
   </version>
   <stability>
    <release>beta</release>
    <api>beta</api>
   </stability>
   <date>2006-01-13</date>
   <license uri="http://www.example.com">BSD License</license>
   <notes>- explicitly pass if the module is phptype specific in all loadModule calls (bug #6226)
- fixed signature of executeStoredProc()
- typo fixes in error handling of nextResult() and numRows() calls
- _fixIndexName() now just attempts to remove possible formatting
- renamed _isSequenceName() to _fixSequenceName()
- _fixSequenceName() now just attempts to remove possible formatting, and only
  returns a boolean if no formatting was applied when the new &quot;check&quot; parameter is set to true
- fixed bug that caused unique indexes from not being seen (bug #6476)

open todo items:
- considering migrating away from OID&apos;s to bytea, since this is encourage
  since version 8 and is also what PDO expects, however there is no streaming
  API for bytea columns .. this needs to be done using manually chunked reads/writes</notes>
  </release>
  <release>
   <version>
    <release>0.2.2</release>
    <api>0.2.2</api>
   </version>
   <stability>
    <release>beta</release>
    <api>beta</api>
   </stability>
   <date>2005-12-30</date>
   <license uri="http://www.example.com">BSD License</license>
   <notes>- types can now always be keyed by name or by order

open todo items:
- considering migrating away from OID&apos;s to bytea, since this is encourage
  since version 8 and is also what PDO expects, however there is no streaming
  API for bytea columns .. this needs to be done using manually chunked reads/writes</notes>
  </release>
  <release>
   <version>
    <release>0.2.1</release>
    <api>0.2.1</api>
   </version>
   <stability>
    <release>beta</release>
    <api>beta</api>
   </stability>
   <date>2005-12-28</date>
   <license uri="http://www.example.com">BSD License</license>
   <notes>- fixed datatype conversion for &quot;time&quot; values
- fixed getTableFieldDefinition() default handling (though still a bit shaky)
- reverse module: ensure that parameters in queries are properly quoted
- fixed bug in alterTable() where &quot;rename&quot; would be skipped if no other alteration is done
- do not use multiple commands in ALTER TABLE (only supported since 8.0)
- implemented native prepared queries
- use proper error code in alterTable()
- renamed table as the last step in alterTable()
- proper quote new table name in alterTable()

open todo items:
- considering migrating away from OID&apos;s to bytea, since this is encourage
  since version 8 and is also what PDO expects, however there is no streaming
  API for bytea columns .. this needs to be done using manually chunked reads/writes</notes>
  </release>
  <release>
   <version>
    <release>0.2.0</release>
    <api>0.2.0</api>
   </version>
   <stability>
    <release>beta</release>
    <api>beta</api>
   </stability>
   <date>2005-12-21</date>
   <license uri="http://www.example.com">BSD License</license>
   <notes>- do not fix case in listUsers()
- unified case fixing in the list*() methods
- tweaked text handling in mapNativeDatatype()
- use getConnection() to access connection property
- split index and constraint handling
- quote identifiers where possible inside the manager methods depending on
  the new &apos;quote_identifier&apos; option (defaults to off)
- refactored get*Declaration() methods to use getTypeDeclaration()
- added support for table and column renaming as well as default and nullability
  changing in alterTable()
- setting in_transaction to false on disconnect
- added new Function modules to handle difference in SQL functions
- force rollback() with open transactions on disconnect
- escape floats to make sure they do not contain evil characters (bug #5608)
- split off manipulation queries into exec() method from the query() method *BC BREAK*
- if result_types is set to false in prepare() method the query will be handled as a DML statement *BC BREAK*
- use a proper default value if a field is set to not null in _getDeclaration*() (bug #5930)
- added ability to determine unsigned in mapNativeDatatype()
  (only really implemented in the mysql(i) drivers) (bug #6054)
- use MDB2_ERROR_NOT_FOUND in getTableConstraintDefinition() and getTableIndexDefinition() (bug #6055)
- added getServerVersion()
- unified array structure in mapNativeDatatype() *BC BREAK*
- added &apos;mdbtype&apos; to tableInfo() output that is generated from mapNativeDatatype()
- changed &apos;len&apos; to &apos;length&apos; in tableInfo() output *BC BREAK*

open todo items:
- implement native prepared queries
- migrate away from OID&apos;s to bytea, since this is encourage since version 8
  and is also what PDO expects
- testgettablefielddefinition and testnow test cases fail</notes>
  </release>
  <release>
   <version>
    <release>0.1.1</release>
    <api>0.1.1</api>
   </version>
   <stability>
    <release>beta</release>
    <api>beta</api>
   </stability>
   <date>2005-10-10</date>
   <license uri="http://www.example.com">BSD License</license>
   <notes>Warning: this release features numerous BC breaks!

There have been considerable improvements to the datatype, manager and reverse
modules. Furthermore preliminary support for auto increment and primary keys
has been added. Please note that making a field auto increment implies a single
column primary key on this field.

- increased php dependency to 4.3.0 due to the usage of the streams API since beta5
- fixed typo in _getTextDeclaration()
- alterTable now needs the full definition to work (use getTableFieldDefinition
 from Reverse module if you do not have a definition at hand) this eliminates the need
 of the declaration part in the alterTable array.
- fix PHP4.4 breakage
- improved error mapping (ported from DB)
- better detect if the query returned a result set or not in _doQuery()
- minor tweaks to LOB handling
- use !empty() instead of isset() in fetchRow to determine if result cols were bound or result types were set
- moved all private fetch mode fix methods into _fixResultArrayValues() for performance reasons
- renamed MDB2_PORTABILITY_LOWERCASE to MDB2_PORTABILITY_FIX_CASE and use &apos;field_case&apos; option to determine if to upper- or lowercase (CASE_LOWER/CASE_UPPER)
- use array_key_exists() instead of isset() where possible
- changed structure of field add/remove/change in alterTable() to match MDB2_Schema
- added createIndex()
- return 0 for manipulation queries when disable_query is enabled
- tweaked getTableFieldDefinition() in reverse module
- added getTypeDeclaration() in the datatype module
- tweaked field changing in alterTable()
- fixed alterTable() signature

open todo items:
- implement native prepared queries</notes>
  </release>
 </changelog>
</package>
